defmodule BamlElixir.Client do
  @moduledoc """
  A client for interacting with BAML functions.

  This module provides functionality to call BAML functions either synchronously or as a stream.

  ## Examples

      # Create a client
      client = %BamlElixir.Client{}

      # Call a function synchronously
      {:ok, result} = BamlElixir.Client.call(client, "MyFunction", %{arg1: "value"})

      # Stream function results
      stream = BamlElixir.Client.stream!(client, "MyFunction", %{arg1: "value"})
      Enum.each(stream, fn result -> IO.inspect(result) end)
  """

  defstruct [
    :client_registry,
    from: "baml_src",
    collectors: []
  ]

  defmacro __using__(opts) do
    path = Keyword.get(opts, :path, "baml_src")

    quote do
      import BamlElixir.Client

      # Get BAML types
      baml_types = BamlElixir.Native.parse_baml(unquote(path))
      baml_class_types = baml_types[:classes]

      # Generate structs for each BAML class type
      for {type_name, fields} <- baml_class_types do
        # Get field names for struct definition
        field_names =
          for {field_name, _} <- fields do
            String.to_atom(field_name)
          end

        # Convert field types for type specification
        field_types =
          for {field_name, field_type} <- fields do
            elixir_type =
              case field_type do
                "string" -> :string
                "int" -> :integer
                "float" -> :float
                "bool" -> :boolean
                # For custom types like Company
                _ -> :any
              end

            {String.to_atom(field_name), elixir_type}
          end

        # Generate struct definition
        Module.create(
          String.to_atom("Elixir.#{type_name}"),
          quote do
            defstruct unquote(field_names)
            @type t :: %__MODULE__{unquote_splicing(field_types)}
          end,
          Macro.Env.location(__ENV__)
        )
      end
    end
  end

  def new do
    %__MODULE__{}
  end

  def from(client = %__MODULE__{}, path) do
    %{client | from: path}
  end

  def add_collector(
        client = %__MODULE__{},
        %BamlElixir.Collector{reference: reference}
      )
      when is_reference(reference) do
    %{client | collectors: [reference | client.collectors]}
  end

  def use_llm_client(client = %__MODULE__{}, name) do
    %{client | client_registry: %{primary: name}}
  end

  @doc """
  Calls a BAML function synchronously.

  ## Parameters
    - `client`: The BAML client struct
    - `function_name`: The name of the BAML function to call
    - `args`: A map of arguments to pass to the function

  ## Returns
    - `{:ok, term()}` on success, where the term is the function's return value
    - `{:error, String.t()}` on failure, with an error message

  ## Examples
      {:ok, result} = BamlElixir.Client.call(client, "MyFunction", %{arg1: "value"})
  """
  @spec call(%__MODULE__{}, String.t(), map()) :: {:ok, term()} | {:error, String.t()}
  def call(%__MODULE__{} = client, function_name, args) do
    BamlElixir.Native.call(client, function_name, args)
  end

  @doc """
  Calls a BAML function and returns a stream of results as tokens are generated by an LLM.

  ## Parameters
    - `client`: The BAML client struct
    - `function_name`: The name of the BAML function to call
    - `args`: A map of arguments to pass to the function

  ## Returns
    - A stream of results

  ## Examples
      stream = BamlElixir.Client.stream!(client, "MyFunction", %{arg1: "value"})
      Enum.each(stream, fn result -> IO.inspect(result) end)
  """
  @spec stream!(%__MODULE__{}, String.t(), map()) :: Enumerable.t()
  def stream!(client, function_name, args) do
    Stream.resource(
      fn ->
        pid = self()

        spawn_link(fn ->
          send(pid, BamlElixir.Native.stream(client, pid, function_name, args))
        end)
      end,
      fn _ ->
        receive do
          {:ok, result} -> {[result], nil}
          :done -> {:halt, :done}
          {:error, reason} -> raise reason
        end
      end,
      fn _ -> :ok end
    )
  end
end
